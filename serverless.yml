# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: myserverlessproject

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  profile:  serverlessUser
  #region: eu-west-1
  environment:
    #TableName: tableName
    tableName: ${self:provider.custom.tableName}
    bucketName: ${self:provider.custom.bucketName}
  iamRoleStatements:
    - Effect: Allow
      Action:
         - dynamodb:*
         - s3:*
      Resource: '*'
  apiKeys:
    - free:    
      - myFreeAPIKey   
    - paid:
      - myPaidAPIKey 
  usagePlan:
    - free:
        quota:
          limit: 1000
          period: MONTH
        throttle:
          rateLimit: 5
          burstLimit: 20

    - paid:    
         quota:
          limit: 10000
          period: MONTH
         throttle:
          rateLimit: 50
          burstLimit: 200
  

  plugins:
    - serverless-s3-sync

  custom:
    tableName: player-points-3
    bucketName: buckettesty79
    s3Sync:
        - bucketName: ${self:provider.custom.bucketName}
          localDir: UploadData


functions:
  getUser:
        handler: lambdas/endpoints/getUser.handler
        events:
            - http:
                  path: get-user/{ID}
                  method: GET
                  cors: true
                  private: true

  getPlayerScore:
        handler: lambdas/endpoints/getPlayerScore.handler
        events:
            - http:
                  path: get-player-score/{ID}
                  method: GET
                  cors: true

  createPlayerScore:
        handler: lambdas/endpoints/createPlayerScore.handler
        events:
            - http:
                  path: create-player-score/{ID}
                  method: POST
                  cors: true   

  createFile:
        handler: lambdas/endpoints/createFile.handler
        events:
            - http:
                  path: create-file/{fileName}
                  method: POST
                  cors: true  
                  
  getFile:
      handler: lambdas/endpoints/getFile.handler
      events:
            - http:
                  path: get-file/{fileName}
                  method: GET
                  cors: true     

resources:
    Resources:
        DemoBucketUpload:
         Type: AWS::S3::Bucket
         Properties:
             BucketName: ${self:provider.custom.bucketName}
             #BucketName: ${self:custom.bucketName}
        MyDynamoDbTable:
        #myDynamoDBTable:
          Type: AWS::DynamoDB::Table
          Properties:
            #TableName: tableName
            #TableName: ${self:custom.tableName}
            TableName: ${self:provider.custom.tableName}
            AttributeDefinitions:
              - AttributeName: ID
              #- AttributeName: "id"
                #AttributeType: "S"
                AttributeType: S
                #AttributeType: "S"
            KeySchema:
              - AttributeName: ID
                KeyType: HASH
            BillingMode: PAY_PER_REQUEST    